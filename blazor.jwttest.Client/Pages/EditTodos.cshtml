@using Microsoft.AspNetCore.Blazor.Services
@using blazor.jwttest.Shared
@using blazor.jwttest.Client.Classes

@inject HttpClient Http
@inject IUriHelper UriHelper
@inject ApplicationState  AppState

@page "/edit/todos"

<h1>Edit Todo's</h1>

@if (todos == null)
{
  <p><em>Loading list...</em></p>
}
else
{
  <td><a href="/add/todo" class="btn btn-success">Add New Todo</a></td><br />
  <table class="table">
    <thead>
      <tr>
        <th>#</th>
        <th>Title</th>
        <th>Done</th>
        <th>&nbsp;</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var todo in todos)
      {
        <tr>
          <td>@todo.Id</td>
          <td>@todo.Title</td>
          <td>@todo.Done</td>
          <td>
            <a href="/edit/todo/@todo.Id" class="btn btn-sm btn-primary">Edit Todo</a>
            <a href="/delete/todo/@todo.Id" class="btn btn-sm btn-danger">Delete Todo</a>
          </td>

        </tr>
      }
    </tbody>
  </table>
}

@functions {

  Todo[] todos;

  private readonly List<string> allowedRoles = new List<string>() { "todoedit" };
  NavigationFailReason failReason = NavigationFailReason.Unknown;

  protected override async Task OnInitAsync()
  {
    // Routine to handle page navigation is in the ApplicationState class.  In Time I'll work out a better way of doing this
    // but for now, it takes 2 required parameters and one optional.
    //
    // Required 1 : 'allowedRoles' - List<string> of roles required to access this page
    // Required 2 : 'failReason' - member of enumeration NavigationFailReason used to communicate fail reason back to caller
    //
    // Optional 1 : 'notLoggedInRoute' - default empty string, if default left, will NOT redirect on not being logged in
    //                                                         if default changed, will try to redirect to that route if not logged in
    //
    // Returns boolean - true = allowed to stay on this page, false = not allowed

    if(!AppState.IsAllowedToNavigate(allowedRoles, out failReason, "/login"))
    {
      // In this example, if we are not logged in, we'll go straight to login route, otherwise we'll return false
      // end up in this "if" with a fail reason of 'RoleNotAllowed'
      if(failReason == NavigationFailReason.RoleNotAllowed)
      {
        UriHelper.NavigateTo("/error403");
        return;
      }
    }

    // If we get here we're allowed to access this page
    todos = await Http.GetJsonAsync<Todo[]>("api/todos/all");
  }

}

