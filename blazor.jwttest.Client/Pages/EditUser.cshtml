@using Microsoft.AspNetCore.Blazor.Services
@using blazor.jwttest.Shared
@using blazor.jwttest.Client.Classes

@inject HttpClient Http
@inject IUriHelper UriHelper
@inject ApplicationState  AppState

@page "/edit/user/{userId}"

<UserForm ref="userForm" LoadingMessage="Loading User, please wait..." MakeIdReadOnly="true" UserInfo="@loadedUser" OnSaveClicked="@SaveClicked" OnCancelClicked="@CancelClicked"></UserForm>

@functions {

  [Parameter]
  string UserId { get; set; }

  private User loadedUser;
  UserForm userForm;
  private readonly List<string> allowedRoles = new List<string>() { "useredit", "admin" };
  NavigationFailReason failReason = NavigationFailReason.Unknown;

  protected override async Task OnInitAsync()
  {
    if (!AppState.IsAllowedToNavigate(allowedRoles, out failReason, "/login"))
    {
      if (failReason == NavigationFailReason.RoleNotAllowed)
      {
        UriHelper.NavigateTo("/error403");
        return;
      }
    }

    // If we get here we're allowed to access this page
    loadedUser = await Http.GetJsonAsync<User>($"api/users/retrieve/{UserId}");
  }

  private async void SaveClicked()
  {
    await Http.SendJsonAsync<User>(HttpMethod.Post, "api/users/update", userForm.UserData);
    UriHelper.NavigateTo("edit/users");
  }

  private void CancelClicked()
  {
    UriHelper.NavigateTo("/edit/users");
  }

}

