@using Microsoft.AspNetCore.Blazor.Services
@using blazor.jwttest.Shared
@using blazor.jwttest.Client.Classes
@using blazor.jwttest.Client.Exceptions

@inject HttpClient Http
@inject IUriHelper UriHelper
@inject ApplicationState  AppState

@page "/delete/user/{userId}"

<div class="container h-100">

  <br><br><h3 class="display-4 text-center">Are you Sure you want to delete this user?</h3>
  <p class="lead text-center text-danger">This operation is permenent and cannot be undone.</p>
  <div class="row">
    <div class="col-4"></div>
    <div class="col">
      <button class="btn btn-success btn-block" onclick="@NoClicked">No</button>
    </div>
    <div class="col">
      <button class="btn btn-danger btn-block" onclick="@YesClicked">Yes</button>
    </div>
    <div class="col-4"></div>
  </div>

</div>

@functions {

  [Parameter]
  string UserId { get; set; }

  private readonly List<string> allowedRoles = new List<string>() { "useredit", "admin" };
  NavigationFailReason failReason = NavigationFailReason.Unknown;

  protected override async Task OnInitAsync()
  {
    if (!AppState.IsAllowedToNavigate(allowedRoles, out failReason, "/login"))
    {
      if (failReason == NavigationFailReason.RoleNotAllowed)
      {
        UriHelper.NavigateTo("/error403");
        return;
      }
      return;
    }
  }

  private async void YesClicked()
  {
    User user = new User();
    user.Id = Convert.ToInt32(UserId);

    try
    {
      await Http.SendJsonAsync(HttpMethod.Post, "api/users/delete", user);
    }
    catch (HttpUnauthorizedException)
    {
      UriHelper.NavigateTo("/error401");
      return;
    }
    catch (HttpForbiddenException)
    {
      UriHelper.NavigateTo("/error403");
      return;
    }
    catch (HttpInternalServerErrorException)
    {
      UriHelper.NavigateTo("/error500");
      return;
    }

    UriHelper.NavigateTo("edit/users");

  }

  private void NoClicked()
  {
    UriHelper.NavigateTo("/edit/users");
  }

}

